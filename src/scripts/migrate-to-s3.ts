/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –æ–ª–∏–º–ø–∏–∞–¥ –≤ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 *
 * –ó–∞–ø—É—Å–∫: npx ts-node src/scripts/migrate-to-s3.ts
 */

import fs from 'fs';
import path from 'path';
import { uploadToS3 } from '../lib/s3';
import { db } from '../lib/db';
import { olympiads, questions } from '../lib/db/schema';
import { eq } from 'drizzle-orm';

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
const mediaSourceDirs = [
  path.join(process.cwd(), 'public', 'olympiad-media'),
  path.join(process.cwd(), 'public', 'static', 'olympiad-media'),
];

async function migrateFilesToS3() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ –≤ S3...');

  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏
  for (const sourceDir of mediaSourceDirs) {
    if (!fs.existsSync(sourceDir)) {
      console.log(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${sourceDir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      continue;
    }

    console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${sourceDir}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const files = fs.readdirSync(sourceDir);
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`);

    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (const [index, fileName] of files.entries()) {
      try {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if (
          fileName.startsWith('.') ||
          fs.lstatSync(path.join(sourceDir, fileName)).isDirectory()
        ) {
          continue;
        }

        console.log(
          `[${index + 1}/${files.length}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${fileName}`
        );

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        const extension = path.extname(fileName).toLowerCase();
        let contentType = 'application/octet-stream'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        if (['.jpg', '.jpeg'].includes(extension)) contentType = 'image/jpeg';
        else if (extension === '.png') contentType = 'image/png';
        else if (extension === '.gif') contentType = 'image/gif';
        else if (extension === '.mp3') contentType = 'audio/mpeg';
        else if (extension === '.mp4') contentType = 'video/mp4';
        else if (extension === '.webm') contentType = 'video/webm';
        else if (extension === '.ogg') contentType = 'audio/ogg';
        else if (extension === '.wav') contentType = 'audio/wav';

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3
        const filePath = path.join(sourceDir, fileName);
        const fileContent = fs.readFileSync(filePath);

        const s3Url = await uploadToS3(
          fileContent,
          fileName,
          contentType,
          'olympiad-media'
        );

        console.log(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: ${s3Url}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await updateMediaUrlsInDatabase(`/olympiad-media/${fileName}`, s3Url);
        await updateMediaUrlsInDatabase(
          `/static/olympiad-media/${fileName}`,
          s3Url
        );
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${fileName}:`, error);
      }
    }
  }

  console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç URL –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ–ª–∏–º–ø–∏–∞–¥
 */
async function updateMediaUrlsInDatabase(oldUrl: string, newUrl: string) {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ª–∏–º–ø–∏–∞–¥—ã
  const allOlympiads = await db.query.olympiads.findMany();

  console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ ${allOlympiads.length} –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö...`);

  for (const olympiad of allOlympiads) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –æ–ª–∏–º–ø–∏–∞–¥—ã
      const olympiadQuestions = await db.query.questions.findMany({
        where: eq(questions.olympiadId, olympiad.id),
      });

      if (olympiadQuestions.length === 0) {
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
      for (const question of olympiadQuestions) {
        if (!question.content) continue;

        try {
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–æ–ø—Ä–æ—Å–∞ (–æ–±—ã—á–Ω–æ JSON)
          const content = JSON.parse(question.content);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –∏ URL
          if (content.media && content.media.url === oldUrl) {
            console.log(
              `–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –≤–æ–ø—Ä–æ—Å–µ ${question.id}`
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º URL –Ω–∞ –Ω–æ–≤—ã–π –∏–∑ S3
            content.media.url = newUrl;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            await db
              .update(questions)
              .set({ content: JSON.stringify(content) })
              .where(eq(questions.id, question.id));

            console.log(`‚úÖ –í–æ–ø—Ä–æ—Å ${question.id} –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º URL`);
          }
        } catch (parseError) {
          console.error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ${question.id}:`,
            parseError
          );
        }
      }
    } catch (olympiadError) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ª–∏–º–ø–∏–∞–¥—ã ${olympiad.id}:`,
        olympiadError
      );
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateFilesToS3().catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
  process.exit(1);
});
